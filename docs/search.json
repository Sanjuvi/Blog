[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "What is Rust?\n\n\n\n\n\n\nSanjeevi\n\n\nJan 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZero Cost Abstraction\n\n\n\n\n\n\nSanjeevi\n\n\nDec 31, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Rust-pl/index.html",
    "href": "posts/Rust-pl/index.html",
    "title": "What is Rust?",
    "section": "",
    "text": "Rust is a emerging new system programming language.But what is system programming language? A system programming lanaguage is like any other programming langauge except it provides full control over hardware ,manual memory management ,abstraction without overhead to implement system level softwares,Run on bare metal(Without any operating system).So why another system programming langauge since we have c/c++.\nReason to choose rust: Linus Torvalds, the creator of Linux,consider a rust as second langauge for the kernel development. The quotes below from Microsoft Azure CTO Mark Russinovich in Twitter.\nnow look at the feature ,the language provide.\nTools and productivity\nCargo -a build tool and package manager like Pip for python,Npm fo js but for a system PL since c/c++ doesn’t have universal supports(Make,Microsoft c++ package manager). Clippy command used find non idiomatic rust like ESLinter for js. Rustfmt command line tool to standardize coding style like Pretty for js. Rustup -Command line tool to insatll rust,rust components cargo,targets for cross compilation,change the rustc version(stable,nighlty,beta)\nRust Language Server(Rls) used in intelligence IDE to provide syntax highlighting,code completion,pointing error.\nRust Docs includes std library documentation,rust book,rust reference book when installing rust locally. RustDoc Generating documents embedded in rust source code via ‘///’ then rendering on Doc.rs Build in Testing frameowrk via test macros Module system to manage large programs. Rust playground for playing with the lanaguage instantly in the web browser without installing rust on local.\nModern language Features:These features are already implemented in dynamic programmin Language but they are not ZCA. Generics Reduce code duplication.Supports static dispatch and virtual dispatch. Traits are like Interface in Java but more flexibilty,Protocols in Swift,Type Classes in Haskell provide abstraction,safety. Pattern Matching like swith but more powerful can be used wide variety of pattern than ‘if’ expression.Rust is expression oriented programming langauge. Enum -A user defined data type ,can contains data,more compact.Used with pattern matching cause they are like unions only field at a time is used not variants. Higienic Macros-To generate boilerplate rust code for you ,expanded when compiling so you code looks clean. Closure-You can do intersting thing with them. Robust error handling strategies through Result & Option Type,using from ,into traits through ? operator. Type aliasing. Boxing.The syntax are clearer than the c,c++ counterpart.what’s more the rust is most loved PL for developers for a 5 years as survayed by anual stackoverflow.\nCommuntiy -Rust foundation(Feature proof Language).Bighands-Mozila,Google,Fb,Amazon,Shopyfy.\nAPI Documentation of dependency if available thorugh crates.io -No internet required once it’s build by “cargo build” command.\nCargo SemVer(Semantic Version)-Only update the minor,pathces not the major version unless we specify explicitly what we are doing.\nHigh level ergonomics to use Dynamic Data structure through Box,Smart pointers Rc,Arc,Automatic cleanup of resources, Operator overloading through Traits.DerefMut,Ops-implement the custom behavior to your type like indexing,compound assignment operator or method call.It’s feel like i own the rust ,like it’s designed for your own .Type Inference,implicit,Elided.\nTauri,Rocket,rayon,Tokio,Warp.\nLast but not least is Rust is a green language i.e energy efficient.It’s important charactersitics toconsider since most of the world communicate through softwares.It’s impact is huge since IoT on scale of billions thus reducing carbon footprints as well as secure s/w .\nTrade off that accepts before rust came: Speed,safety,Easy to use-Pick two c/c++ -Speed, but not safety python,js-Saftey,Easy to use but not speed(Gced,Non deterministic GC pause) Rust -Pick three but at what cost you must to learn foundational concepts of rust in upfront to successfully compile the rust code.\nZero cost abstraction Abstraction in system programming lanaguge don’t impose any additional overhead.Because it’s a system programming language introducing abstraction means reduce the development time,less code,expresssive.\nAOT(Ahead of Time) compiled The rust compiler(rustc) is a gatekeeper to refuse a code that violates the compiler rules without even running a program thus the excution and startup speed is low.\nGuaranteed memory safety Dangling\nBackward compatability-This is important for to Evlove language feature as well as not breaking the code due to introducing new feature to the language.This is reason why c/C++ barely introduce any new features it will break code since it’s already span millions of lines code in production.Beta,stable,Nightly.\nScoped resource management is revolutionary idea to manage memory ,non_memory,locks automatically without human intervention. scoped resource management explained in another blog post with rust code examples.\nUsed by Linux,fb,google android-fushia os,DropBox,Firfox,Amazon.\nSafety,Predictable Performance we know when the resources are cleanup just looking at the code unlike Gced,interpreter PL.\nCompiler errors are contain Rich info about what went wrong ,where that happened if code doesn’t compile & also suggest to fix that.This is important Since rust introduce unique concepts Like Ownership,borrowing,Liftime to rule out use after free,double free,dangling pointer,Iterator Invalidation,Concurrency bug at compile time.Don’t worry if those words strange to you as they are explained in separate blog post.\nCustom types to enocde the business logic ,validation.\nOne of the most supports of wasm -the protable binary runtime for web,desktop.If you want to know more about wasm read my previous blog post here.\nFearless concurrency since new hardware brings more cores than fast processor.Implementing concurreny & parallism is less cumbersome than c/c++,java.\nBecause most of the errors are moved to compile time we get the fast machine code as well as comple time gurantee that our code doesn’t crash at runtime .Like haskell once it’s compiles it’s work.(when unsafe sound)\nIf you start a new project that needs to be run as efficient as possible without memory bugs also no GC then consider using rust.\nRust is interoperable with other PL through FFI.So instead of writing from scratch(Which is often unsuccesful) just rewrite the part that need to be run fast and won’t crash at runtime.Using FFI for Elexir ,they reduce the latency down to nano seconds.Tilde rewrite the HTTP end points in rust the gain was phenomenol,from 5GB memory(Java) to 50MB memory usage.(cloud bill also reduced as a side effect). Supports dynlib-so we can use that library at runtime like libc.\nI think that rust is programming languge that c++ creater anticipated in his paper “History of c++” at end of the paper.\nReferences: https://www.nature.com/articles/d41586-020-03382-2 https://rust-lang.org https://stackoverflow.blog/2020/01/20/what-is-rust-and-why-is-it-so-popular/ https://blog.rust-lang.org/2014/10/30/Stability.html https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html https://blog.rust-lang.org/2015/04/24/Rust-Once-Run-Everywhere.html Helix -Ruby & Rust\nSome peoples to know in Rust community: Auron Hatashi moto Jim blandy(Book) Carol & sal(free Book ,youtube video)\nFootNotes: I never used c/c++ for anything useful other than 101.I find that it’s difficult to understand the code moreover the pointers are..Rust is much more ergonomics than c++"
  },
  {
    "objectID": "posts/Rust-pl/index.html#reference",
    "href": "posts/Rust-pl/index.html#reference",
    "title": "What is Rust?",
    "section": "Reference:",
    "text": "Reference:\n\nWhy Scientist turns into Rust Nature\nAmazon blog about rust"
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html",
    "href": "posts/Zero-cost-abstraction/index.html",
    "title": "Zero Cost Abstraction",
    "section": "",
    "text": "Zero cost abstraction is a memory model for system programming language that provides abstraction that are equivalent to hand written low level code without any additional overhead ,proposed by Stroustrup in his paper Abstraction and C++ machine model.Let’s decompose them to explain their properties.\nZero:\nIt’s still cost but compared to other high level languages(Python,Java,C#) they have little overhead when using virtual dispatch.Once c/c++ compiler emit the assembly from the source code through GCC or LLVM the compiler no longer needed which means we can distribute excutable files without end user not used c/c++.Where as in dynamic programming lanaguages the source code and the language runtime must always sit behind to run the program.Just because we have lots of memory that does’t mean use all of that,that’s what garbage collector do.Where as in embedded system memory is measured in KiloBytes rather than GigaBytes,TeraBytes in PC,supercomputers in that gc is not an option other than using c/c++ or now rust.It’s fast as the hardware allowed.\nCost:\nEvery compuatation we perform have cost associated with it ,how much resources(time and space) needed to run a particular kind of task.Garbage collected languages takes more memory than necessary than manual memory management languages like c,c++,rust.\nAbstraction :"
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html#other-languages-that-are-used-in-embedded-systems",
    "href": "posts/Zero-cost-abstraction/index.html#other-languages-that-are-used-in-embedded-systems",
    "title": "Zero Cost Abstraction",
    "section": "Other languages that are used in embedded systems:",
    "text": "Other languages that are used in embedded systems:\nAda D Ivory"
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html#cpu-chip-architecture",
    "href": "posts/Zero-cost-abstraction/index.html#cpu-chip-architecture",
    "title": "Zero Cost Abstraction",
    "section": "CPU Chip Architecture",
    "text": "CPU Chip Architecture\nEach cpu architecture have different assembly instruction,some are backwards compatible others don’t.Compiler is complex piece of software that does the heavy work of converting high level concepts to architecture specific assmebly.Below are most used cpu architectures and their 32 and 64 bit variants.\n\nIntel\nAmd\nArm\nPowerPC(IBM)\nAlpha\nApple Silicon(Only available in Apple products)\nRisc -v(Opensource Instruction Set Architecture(ISA)))\n\nIt’s actually misleading when people say c++ is a platform dependent ,but java have famous quote that “Write once ,run anywhere”.Lots of the complexity is abstracted away from programmer by the java runtime libararies.Java Runtime converts platform independent byte code into machine specific instruction at runtime.\nIf Manual memory management is more efficient then why we have GCed language in the first place.Sotware runs the world,it is important to write software that are memory safety since writing memory safety sotwares in system programming lanaguge lead to vulnerability because of way the language is designed.Lots of series vulnerability found in c/c++ code bases.GCed lanaguge prefer safety over runtime performance.But rust came to break that tradeoff as we will see in next article."
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html#references",
    "href": "posts/Zero-cost-abstraction/index.html#references",
    "title": "Zero Cost Abstraction",
    "section": "References",
    "text": "References\n\nZero cost abstraction in Rust blog\nAbstraction and C++ machine model stroustrup 2005"
  }
]