[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "What is Rust?\n\n\n\n\n\n\nSanjeevi\n\n\nJan 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZero Cost Abstraction\n\n\n\n\n\n\nSanjeevi\n\n\nDec 31, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Rust-pl/index.html",
    "href": "posts/Rust-pl/index.html",
    "title": "What is Rust?",
    "section": "",
    "text": "Rust is a emerging new system programming language.But what is system programming language? A system programming language is like any other programming langauge except it provides full control over hardware ,manual memory management ,abstraction without overhead to implement system level software,run on bare metal(Without any operating system).So why another system programming language since we have c/c++.\nWhat others tells about rust Linus Torvalds, the creator of Linux,consider a rust as second language for the kernel development.\nThe quotes below from Microsoft Azure CTO Mark Russinovich in Twitter.\nCurrently rust is the best alternative to c/c++ by Levin Microsoft\nRust is most loved by developers in five years row ,a survey conducted by stackoverflow.\nnow look at the feature ,the language provide.\nZero cost abstraction Abstraction in system programming language don’t impose any additional overhead.Because it’s a system programming language introducing abstraction means reduce the development time,less code,expressive. Zero cost FFI because of lack of GC.\nAOT(Ahead of Time)\nRust compiler(rustc) is a gatekeeper to refuse a code that violates the compiler rules without even running a program thus the execution and startup speed is low once executable file generated but also compiler optimize\nGuaranteed memory safety\nMove Semantics\nFearless concurrency.\nTools and productivity\nCargo -a build tool and package manager like Pip for python,Npm fo js but for a system PL since c/c++ doesn’t have universal supports(Make,Microsoft c++ package manager).\nClippy command used find non idiomatic rust like ESLinter for js.\nRustfmt command line tool to standardize coding style like Pretty for js.\nRustup -Command line tool to install rust,rust components cargo,targets for cross compilation,change the rustc version(stable,nightly,beta)\nRust Language Server(rls) used in intelligence IDE to provide syntax highlighting,code completion,pointing error.\nRust Docs includes std library documentation,rust book,rust reference book when installing rust locally.\nRustDoc Generating documents embedded in rust source code via ‘///’ then rendering on Doc.rs\nBuild in testing framework via test macros\nModule system to manage large programs.\nBecause rust is a system programming language it supports condtional compilation,staticlib,dynamic library .\nRust playground for playing with the language instantly in the web browser without installing rust on local.\nRust is a modern system programming language in addition to memory safe without using Garbage Collector.Is modern in a sense that these features are available in high level dynamic programming language not implemented in system programming lanaguage.Functional programming features are include(In the context of haskell-a pure functional programming language)\nOther Features\nSupports UTF-8 out of the box.Thus we can use more languages other than english,emojies,scientific symbols.\nErgonomics to use language feature than in the c/c++ counterparts.\nGenerics Reduce code duplication.Supports static dispatch and virtual dispatch via trait object at runtime.\nHygienic Macros-To generate boilerplate rust code for you ,expanded when compiling so your code looks clean.\nClosure-A anonymous function.You can do interesting thing with them without worrying about safety.\nRobust error handling strategies through Result & Option Type,using from ,into traits through ? operator.You never forgot to check error as the compiler force you to do it ,the exhaustive nature of pattern matching.\nCrates.io a package registry for rust opensource libraries which cargo uses.\nBackward compatibility-This is important for to evolve language feature as well as not breaking the code due to introducing new feature into the language.This is reason why c/C++ barely introduce any major features or it will break the old code since it’s already span millions of lines code in production.\nAutomatic scoped management for memory ,non_memory resources,locks,smart pointers are phenomenal since no human intervention is needed and also no runtime cost for that(More on that later).It’s RAII(Resource acquistion is intialization) principle from c++ for managing resources.\nRust foundation is backed by big players that include Microsoft, Meta, Dropbox, Arm, Google, Amazon ,Shopify.and others.Rust is a future proof language.\nCompile errors contain rich information about what went wrong ,where that happened if code doesn’t compile and also suggest to fix that.This is important since rust introduce unique concepts Like ownership,borrow,lifetime to rule out use after free, double free, dangling pointer, iterator invalidation,concurrency bug at compile time.Don’t worry if those words strange to you as they are explained in next blog post with rust code examples.Rust includes documentation about compile errors.\nRust wasm-bindgen library generate webassembly -It’s a portable runtime for web,desktop,cloud,blockchain where isolation,startup time is important.Webassembly runtime wasmtime itself written in rust.\nBecause most of the errors are moved to compile time ,they unlikely to crash at runtime.Like haskell once it’s compiles it’s just work.\nLast but not least is Rust is a green language i.e it’s very energy efficient after c.It’s important characteristics to consider since most of the world communicate through softwares.It’s impact is huge since IoT on scale of billions thus reducing carbon footprints as well as provides safety.\nI think that rust is going to be a programming language that c++ creater anticipated in his paper “History of c++” at end of the paper.\nTrade off that accepts before rust came:\nSpeed,safety,Easy to use-Pick any two.Language tend to provide safety,easy of use like python,java,js but not speed.Languages like c/c++ provide speed but unsafe.For Rust -Pick three but at what cost.Rust puts lot of restriction on the programmer side so it’s essential to learn foundational concepts of rust in upfront to successfully compile the rust code.This is very cumbersome if you are coming from dynamic programming languages like python,java script,ruby.Stay patient,listen to the compiler and fix it."
  },
  {
    "objectID": "posts/Rust-pl/index.html#resources-for-further-learning-about-rust",
    "href": "posts/Rust-pl/index.html#resources-for-further-learning-about-rust",
    "title": "What is Rust?",
    "section": "Resources for further learning about rust",
    "text": "Resources for further learning about rust\nRust official Website\nFree high quality Rust book\nProgramming rust book\nWhy scientist turns into rust by Nature\nWhy rust so popular by stackoverflow\nStability Without stagnation\nRust Ergonomics\nSeamless Integration with c\nHistory of c++\nEnergy efficiency of Rust by amazon blog"
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html",
    "href": "posts/Zero-cost-abstraction/index.html",
    "title": "Zero Cost Abstraction",
    "section": "",
    "text": "Zero cost abstraction is a memory model for system programming language that provides abstraction that are equivalent to hand written low level code without any additional overhead ,proposed by Stroustrup in his paper Abstraction and C++ machine model.Let’s decompose them to explain their properties.\nZero:\nIt’s still cost but compared to other high level languages(Python,Java,C#) they have little overhead when using virtual dispatch.Once c/c++ compiler emit the assembly from the source code through GCC or LLVM the compiler no longer needed which means we can distribute executable files without end user installed c/c++.Where as in dynamic programming languages the source code and the language runtime must always sit behind to run the program.Just because we have lots of memory that doesn’t mean use all of that,that’s what garbage collector do.Where as in embedded system memory is measured in KiloBytes rather than GigaBytes,TeraBytes in PC,supercomputers in that gc is not an option other than using c/c++ or now rust.It’s fast as the hardware allowed.\nCost:\nEvery computation we perform have cost associated with it ,how much resources(time and space) needed to run a particular kind of task.Garbage collected languages takes more memory than necessary than manual memory management languages like c,c++,rust.\nAbstraction :"
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html#other-languages-that-are-used-in-embedded-systems",
    "href": "posts/Zero-cost-abstraction/index.html#other-languages-that-are-used-in-embedded-systems",
    "title": "Zero Cost Abstraction",
    "section": "Other languages that are used in embedded systems:",
    "text": "Other languages that are used in embedded systems:\nAda D Ivory"
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html#cpu-chip-architecture",
    "href": "posts/Zero-cost-abstraction/index.html#cpu-chip-architecture",
    "title": "Zero Cost Abstraction",
    "section": "CPU Chip Architecture",
    "text": "CPU Chip Architecture\nEach cpu architecture have different assembly instruction,some are backwards compatible others don’t.Compiler is complex piece of software that does the heavy work of converting high level concepts to architecture specific assembly.Below are most used cpu architectures and their 32 and 64 bit variants.\n\nIntel\nAmd\nArm\nPowerPC(IBM)\nAlpha\nApple Silicon(Only available in Apple products)\nRisc -v(Opensource Instruction Set Architecture(ISA)))\n\nIt’s actually misleading when people say c++ is a platform dependent ,but java have famous quote that “Write once ,run anywhere”.Lot of the complexity is abstracted away from programmer by the java runtime libraries.Java Runtime converts platform independent byte code into machine specific instruction at runtime.\nIf Manual memory management is more efficient then why we have GCed language in the first place.Software runs the world,it is important to write software that are memory safety since writing memory safety sotware in system programming lanaguge lead to vulnerability because of way the language is designed.Lots of series vulnerability found in c/c++ code bases.GCed language prefer safety over runtime performance.But rust came to break that tradeoff as we will see in next article."
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html#references",
    "href": "posts/Zero-cost-abstraction/index.html#references",
    "title": "Zero Cost Abstraction",
    "section": "References",
    "text": "References\n\nZero cost abstraction in Rust blog\nAbstraction and C++ machine model stroustrup 2005"
  }
]