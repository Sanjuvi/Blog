[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "What is Rust?\n\n\n\nTheory\n\n\n\n\n\n\n\nSanjeevi\n\n\nJan 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZero Cost Abstraction\n\n\n\nTheory\n\n\n\n\n\n\n\nSanjeevi\n\n\nDec 31, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Rust-pl/index.html",
    "href": "posts/Rust-pl/index.html",
    "title": "What is Rust?",
    "section": "",
    "text": "Rust is an emerging new system programming language. But what is a system programming language? A system programming language is like any other programming language except it provides full control over hardware, manual memory management, abstraction without overhead like c++ to implement system-level software, and runs on bare metal(Without any operating system). So why another system programming language since we have c/c++?\nWhat others tell about rust\nThe quotes below are from Microsoft Azure CTO Mark Russinovich in Twitter.\nRust is most loved by developers for five years row, a survey conducted by StackOverflow.\nnow look at the feature, the language provides.\nZero cost abstraction Abstraction in the system programming language doesn’t impose any additional overhead. Because it’s a system programming language introducing abstraction means reducing the development time, less code, expressive.More on here.\nAOT(Ahead of Time)\nRust compiler(rustc) is a gatekeeper to refuse a code that violates the compiler rules without even running a program thus the execution and startup speed is low once an executable file is generated.\nGuaranteed memory safety\nMove Semantics\nFearless concurrency.\nTools and productivity\nCargo -a build tool and a package manager like Pip for python,Npm fo js but for a system PL.\nClippy command used to find non-idiomatic rust like ESLinter for js.\nRustfmt command line tool to standardize coding style like pretty quick for js.\nRustup -Command line tool to install rust, rust components cargo,targets for cross-compilation, change the rustc version(stable,nightly,beta)\nRust Language Server(rls) used in intelligence IDE to provide syntax highlighting,code completion, pointing errors.\nRust Docs includes std library documentation, rust book, rust reference book when installing rust locally.\nRustDoc Generating documents embedded in rust source code via ‘///’ and then rendering on Doc.rs\nBuild in testing framework via test macros.\nModule system to manage large programs.\nBecause rust is a system programming language it supports conditional compilation,staticlib,dynamic link library.\nRust playground for playing with the language instantly in the web browser without installing rust locally.\nRust is a modern system programming language in addition to memory safe without using Garbage Collector. Is modern in the sense that these features are available in high-level dynamic programming languages not implemented in system programming languages(In terms of their safe use). Functional programming features are included (In the context of Haskell-a pure functional programming language)\nOther Features and Community\nSupports UTF-8 out of the box. Thus we can use more languages other than English. We can use emojis, scientific symbols, and other foreign languages.\nErgonomics to use language features than in the c/c++ counterparts.\nGenerics Reduce code duplication. Supports static dispatch along with compiler optimization and virtual dispatch via trait object at runtime.\nHygienic Macros-To generate boilerplate rust code for you , expanded when compiling so your code looks clean.\nClosure anonymous function.You can do an interesting thing with them without worrying about safety.\nRobust error handling strategies through Result & Option Type,using from ,into traits through ? operator.You never forgot to check error as the compiler forces you to do it ,the exhaustive nature of pattern matching.\nCrates.io a package registry for rust opensource libraries which cargo uses interanlly when building.\nBackward compatibility-This is important for evolving language feature as well as not breaking the code due to introducing new features into the language.This is reason why c/C++ barely introduces any major features or it will break the old code since it’s already span millions of lines of code in production.\nAutomatic scoped management for memory ,non_memory resources,locks,smart pointers are phenomenal since no human intervention is needed and also no runtime cost for that(More on that later).It’s RAII(Resource acquistion is initialization) principle from c++ for managing resources.\nRust Foundation is backed by big players that include Microsoft, Meta, Dropbox, Arm, Google, Amazon ,Shopify and others.Rust is a future-proof language.\nCompile errors contain rich information about what went wrong ,where that happened if code doesn’t compile and also suggests fixing that.This is important since rust introduces unique concepts Like ownership, borrowing,lifetime to rule out use after free, double free, dangling pointer, iterator invalidation,concurrency bugs at compile time.Don’t worry if those words are strange to you as they are explained in next blog post with rust code examples.Rust includes documentation about compile errors.\nRust wasm-bindgen library generate Webassembly.It’s a portable runtime for web, desktop, cloud, and blockchain where isolation and startup time is important. Rust has the best toolchain for web assembly than other languages. Web assembly runtime wasmtime, Cranelift itself is written in rust.\nBecause most of the errors are moved to compile time ,they are unlikely to crash at runtime and thus reliable for embedded systems reliable.Like haskell once it’s compiled it’s just work.\nLast but not least Rust is a green language i.e it’s very energy efficient after c.It’s important characteristic to consider since most of the world communicates through software.It’s impact is huge since IoT is on scale of billions thus reducing carbon footprints as well as providing safety.In the case of cloud computing writing software in rust means low carbon footprints like c but safety as well as less cloud bills as rust consume less memories.\nI think that rust is going to be a programming language that c++ creator anticipated in his paper “History of c++” at end of the paper.\nThe trade off that accepts before rust came:\nSpeed, safety,Easy to use-Pick any two.Language tends to provide safety, easy of use like python,java,js but not speed. Languages like c/c++ provide speed but unsafe.For Rust -Pick three but at what cost.Rust puts lot of restrictions on the programmer side so it’s essential to learn foundational concepts of rust upfront to successfully compile the rust code. This is very cumbersome if you are coming from dynamic programming languages like python,java script,ruby.Stay patient,listen to the compiler and fix it."
  },
  {
    "objectID": "posts/Rust-pl/index.html#resources-for-further-learning-about-rust",
    "href": "posts/Rust-pl/index.html#resources-for-further-learning-about-rust",
    "title": "What is Rust?",
    "section": "Resources for further learning about rust",
    "text": "Resources for further learning about rust\nOpen the link in a new tab by holding ‘ctrl’ and then click the link,if you are using a mouse then just click a rolling button.\nRust official Website\nFree high quality Rust book\nProgramming rust book\nWhy scientist turns into rust by Nature\nWhy rust so popular by stackoverflow\nStability Without stagnation\nRust Ergonomics\nSeamless Integration with c\nHistory of c++\nWhy Discord is switching from Go to Rust.\nSafe System Programming in Rust.\nEnergy efficiency of Rust by amazon blog"
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html",
    "href": "posts/Zero-cost-abstraction/index.html",
    "title": "Zero Cost Abstraction",
    "section": "",
    "text": "Zero cost abstraction is a memory model for the system programming language that provides abstraction equivalent to handwritten low-level code without any additional overhead, proposed by Stroustrup in his paper Abstraction and C++ machine model. Let’s decompose them to explain their properties.\nZero:\nIt’s still costly but compared to other high-level languages(Python, Java, C#) they have little overhead when using virtual dispatch. Once the c/c++ compiler emits the assembly from the source code through GCC or LLVM the compiler is no longer needed which means we can distribute executable files without the end user installing c/c++.Whereas in dynamic programming languages the source code and the language runtime must always sit behind to run the program. Just because we have lots of memory that doesn’t mean use all of that, that’s what garbage collectors do. Whereas in embedded systems memory is measured in KiloBytes rather than GigaBytes, TeraBytes in PC, supercomputers in that GC is not an option other than using c/c++ or now rust. It’s fast as the hardware allowed.\nCost:\nEvery computation we perform has a cost associated with it, and how many resources(time and space) are needed to run a particular kind of task? Garbage-collected languages take more memory than necessary than manual memory management languages like c,c++, and rust.\nAbstraction :"
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html#other-languages-that-are-used-in-embedded-systems",
    "href": "posts/Zero-cost-abstraction/index.html#other-languages-that-are-used-in-embedded-systems",
    "title": "Zero Cost Abstraction",
    "section": "Other languages that are used in embedded systems:",
    "text": "Other languages that are used in embedded systems:\nAda D Ivory"
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html#cpu-chip-architecture",
    "href": "posts/Zero-cost-abstraction/index.html#cpu-chip-architecture",
    "title": "Zero Cost Abstraction",
    "section": "CPU Chip Architecture",
    "text": "CPU Chip Architecture\nEach CPU architecture has different assembly instructions, some are backward compatible others don’t. The compiler is a complex piece of software that does the heavy work of converting high-level concepts to architecture-specific assembly. Below are the most used CPU architectures and their 32 and 64-bit variants.\n\nIntel\nAMD\nArm\nPowerPC(IBM)\nAlpha\nApple Silicon(Only available in Apple products)\nRisc -v(Opensource Instruction Set Architecture(ISA)))\n\nIt’s misleading when people say c++ is platform-dependent, but java has a famous quote that “Write once, run anywhere”.A lot of the complexity is abstracted away from the programmer by the java runtime libraries.Java Runtime converts platform-independent byte code into machine-specific instruction at runtime.\nIf Manual memory management is more efficient then why do we have GCed language in the first place? The software runs the world, it is important to write software that is memory-safe since writing memory-safety software in a system programming language leads to vulnerability because of the way the language is designed. Lots of series vulnerabilities are found in c/c++ code bases.GCed language prefers safety over runtime performance. But rust came to break that tradeoff as we will see in the next article."
  },
  {
    "objectID": "posts/Zero-cost-abstraction/index.html#references",
    "href": "posts/Zero-cost-abstraction/index.html#references",
    "title": "Zero Cost Abstraction",
    "section": "References",
    "text": "References\n\nZero cost abstraction in Rust blog\nAbstraction and C++ machine model stroustrup 2005"
  }
]