---
title: "What is Rust?"
author: "Sanjeevi "
date: "2023-01-01"
categories: [Theory]
image: "image.svg"
---
**Rust** is an emerging new system programming language. But what is a system programming language?
A system programming language is like any other programming language except it provides full control over hardware, manual memory management, abstraction without overhead like c++ to implement system-level software, and runs on bare metal(Without any operating system). So why another system programming language since we have c/c++?

**What others tell about rust**

> Linus Torvalds, the creator of Linux, considers rust as a second language for kernel development. This is somewhat intriguing since Linux doesn't consider c++ as a secondary language

The quotes below are from Microsoft Azure CTO Mark Russinovich in Twitter.

> Speaking of languages, it's time to halt starting any new projects in C/C++ and use Rust for those scenarios where a non-GC language is required. For the sake of security and reliability. the industry should declare those languages as deprecated.

> The microsoft Security Response Center (MSRC) stated â€œwe think that Rust represents the best alternative to C and C++ currently available.

Rust is most loved by developers for five years row, a survey conducted by StackOverflow.

now look at the feature, the language provides.

**Zero cost abstraction** 
 Abstraction in *the system* programming language doesn't impose any additional overhead. Because it's a system programming language introducing abstraction means reducing the development time, less code, expressive.More on [here](https://sanjuvi.github.io/Blog/posts/Zero-cost-abstraction/).

**AOT**(Ahead of Time) 

Rust compiler(rustc) is a gatekeeper to refuse a code that violates the compiler rules without even running a program thus the execution and startup speed is low once an executable file is generated. 

**Guaranteed memory safety**

- Dangling pointer, double free, and null pointer dereferences are memory errors that are detected at compile time i.e the code with these errors doesn't compile. Integer overflow and buffer overflow are detected at runtime, causing the rust program to panic at runtime instead of continuing with the wrong input which leads to undefined behavior.
As long as the unsafe sound we are free of memory-related bugs.

**Move Semantics**

- In rust, a type either copies or move. This distinction makes certain behavior injected when variables go out of scope by the compiler without the programmer's intent. Primitive types like Int, Float, bool, and char are copy types i.e they are cheap to make a copy. Dynamically allocated types are movable i.e when assigned to a new variable, the old one is uninitialized, this prevents double-free error since only one owner for the variable except for smart pointers.

 **Fearless concurrency**.
 
 - Today consumer pc hardware brings more cores than a fast processor. Concurrency is way to increase throughput of a program.But implementing concurrency have its own risk like *race condition* (ordering of task is nondeterministic),*data races* (multiple threads are accessing and writing to same memory without synchronization which leads to data inconsistent), *Deadlock* (form cycle prevent to release memory thus leads memory leaks).Cncurrency in rust is a low-risk operation than c/c++,java since rustc has your back.

 - Concurrency bug is detected at **compile time**. This is significant because concurrency bugs are much harder to reproduce as they were time-dependent (non-deterministic).There are libraries that rust provides to implement synchronization and lock-free concurrency safely without any data corruption whatsoever.

**Tools and productivity**
 
*Cargo* -a build tool and a package manager like Pip for python,Npm fo js but for a system PL since c/c++
 doesn't have universal supports(Make,Microsoft c++ package manager).

*Clippy* command used to find non-idiomatic rust like ESLinter for js.

*Rustfmt* command line tool to standardize coding style like pretty quick for js.

*Rustup* -Command line tool to install rust, rust components cargo,targets for cross-compilation, change the
rustc version(stable,nightly,beta)

*Rust Language Server(rls)* used in intelligence IDE to provide syntax highlighting,code completion, pointing errors.

*Rust Docs* includes std library documentation, rust book, rust reference book when installing rust locally.

*RustDoc* Generating documents embedded in rust source code via '///' and then rendering on Doc.rs

 Build in testing framework via *test* macros.

 Module system to manage large programs.

 Because rust is a system programming language it supports conditional compilation,staticlib,dynamic link
 library.

*[Rust playground](play.rust-lang.org/)* for playing with the language instantly in the web browser without installing rust locally.

Rust is a modern system programming language in addition to memory safe **without using Garbage Collector**. Is modern in the sense that these features are available in high-level dynamic programming languages not implemented in system programming languages. Functional programming features are included (In the context of Haskell-a pure functional programming language)

- Unit type-A function without explicit return type returns unit type '()-an empty tuple'.It's like a void in c/c++

- pattern matching-Pattern must be exhaustive,cover all possible cases otherwise get a compile error.

- Algebraic data types(Enums)-This is useful in handling errors since rust doesn't have a nullpointer. Super handy with pattern matching.

- lazy evaluation-Iterators in rust are lazy, they are evaluated as they are requested not at once.

- Rust is an expression-oriented language. This makes the code look cleaner.

- Traits are equivalent to type classes in Haskell. 

- Type aliasing increase the readability by making long names with short name wherever they are used.

- Immutability,type deduction,error as code.

**Other Features**

Supports *UTF-8* out of the box. Thus we can use more languages other than English. We can use emojis, scientific symbols, and other foreign languages.

**Ergonomics** to use language features than in the c/c++ counterparts.

*Generics* Reduce code duplication. Supports static dispatch along with compiler optimization and virtual dispatch via trait object at runtime.

*Hygienic Macros*-To generate boilerplate rust code for you , expanded when compiling so your code looks clean.

*Closure* anonymous function.You can do an interesting thing with them without worrying about safety.

*Robust error handling strategies* through Result & Option Type,using from ,into traits through ? operator.You never forgot to check error as the compiler forces you to do it ,the exhaustive nature of pattern matching.

*[Crates.io](https://crates.io)* a package registry for rust opensource libraries which cargo uses interanlly when building.

*Backward compatibility*-This is important for evolving language feature as well as not breaking the code due to introducing new features into the language.This is reason why c/C++ barely introduces any major features or it will break the old code since it's already span millions of lines of code in production.

**Automatic scoped management** for memory ,non_memory resources,locks,smart pointers are phenomenal since no human intervention is needed and also no runtime cost for that(More on that later).It's *RAII*(Resource acquistion is initialization) principle from c++ for managing resources.

*[Rust Foundation](https://foundation.rust-lang.org/)* is backed by big players that include Microsoft, Meta, Dropbox, Arm, Google, Amazon ,Shopify.and others.Rust is a future-proof language.

*Compile errors* contain rich information about what went wrong ,where that happened if code doesn't compile and also suggests fixing that.This is important since rust introduces unique concepts Like **ownership, borrowing,lifetime** to rule out use after free, double free, dangling pointer, iterator invalidation,concurrency bugs at compile time.Don't worry if those words are strange to you as they are explained in next blog post with rust code examples.Rust includes documentation about [compile errors](https://doc.rust-lang.org/error_codes/error-index.html).

Rust **wasm-bindgen** library generate **webassembly** -It's a portable runtime for web,desktop,cloud,blockchain where isolation,startup time are important.Webassembly runtime *wasmtime* itself is written in rust.

Because most of the errors are moved to compile time ,they are unlikely to crash at runtime and thus reliable for embedded systems reliable.Like haskell once it's compiled it's just work.

Last but not least Rust is a green language i.e it's very **energy efficient** after c.It's important characteristic to consider since most of the world communicates through software.It's impact is huge since IoT is on scale of billions thus reducing carbon footprints as well as providing safety.In the case of cloud computing writing software in rust means low carbon footprints like c but safety as well as less cloud bills as rust consume less memories.

I think that rust is going to be a programming language that c++ creator anticipated in his paper "History of c++" at end of the paper.

The trade off that accepts before rust came:

 **Speed, safety,Easy to use**-Pick any two.Language tends to provide **safety, easy of use** like python,java,js but not speed. Languages like c/c++ provide **speed but unsafe**.For Rust -Pick three but at what cost.Rust puts lot of restrictions on the programmer side so it's essential to learn foundational concepts of rust *upfront* to successfully compile the rust code. This is very cumbersome if you are coming from dynamic programming languages like python,java script,ruby.Stay patient,listen to the compiler and fix it.

## Resources for further learning about rust

Open the link in a new tab by holding 'ctrl' and then click the link,if you are using a mouse then just click a rolling button.

[Rust official Website](https://rust-lang.org)

[Free high quality Rust book](https://doc.rust-lang.org/book/)

[Programming rust book](https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/)

[Why scientist turns into rust by Nature](https://www.nature.com/articles/d41586-020-03382-2)

[Why rust so popular by stackoverflow](https://stackoverflow.blog/2020/01/20/what-is-rust-and-why-is-it-so-popular/)

[Stability Without stagnation](https://blog.rust-lang.org/2014/10/30/Stability.html)

[Rust Ergonomics](https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html)

[Seamless Integration with c](https://blog.rust-lang.org/2015/04/24/Rust-Once-Run-Everywhere.html)

[History of c++](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwiywIqwmab8AhWn2DgGHVPKBYQQFnoECCsQAQ&url=https%3A%2F%2Fwww.stroustrup.com%2Fhopl2.pdf&usg=AOvVaw3plr2I2rXY4sbYfqb3dGKs)

[Why Discord is switching from Go to Rust](https://discord.com/blog/why-discord-is-switching-from-go-to-rust).

[Energy efficiency of Rust by amazon blog](https://aws.amazon.com/blogs/opensource/sustainability-with-rust/)

